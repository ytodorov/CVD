@page
@model ChatModel

<!DOCTYPE html>
<html>
<head>
    <base href="https://demos.telerik.com/kendo-ui/scheduler/pdf-export">
    <style>
        html {
            font-size: 14px;
            font-family: Arial, Helvetica, sans-serif;
        }
    </style>
    <title></title>
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2018.3.1017/styles/kendo.common-material.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2018.3.1017/styles/kendo.material.min.css" />
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2018.3.1017/styles/kendo.material.mobile.min.css" />

    <script src="https://kendo.cdn.telerik.com/2018.3.1017/js/jquery.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2018.3.1017/js/jszip.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2018.3.1017/js/kendo.all.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2018.3.1017/js/kendo.timezones.min.js"></script>


</head>
<h1>Diana - Test page with chat bot</h1>
<body>
    <div id="example2">
        <div class="box wide hidden-on-narrow">
            <div id="info" class="box-col"></div>
            <div class="box-col select-col">
                <h4>Surface type</h4>
                <ul id="select-type">
                    <li>SVG</li>
                    <li>Canvas</li>
                    <li>VML</li>
                </ul>
            </div>
        </div>
        <div id="surface-container" class="hidden-on-narrow">
            <div id="surface" style="width: 800px; height: 300px;"></div>
        </div>
        <div class="responsive-message"></div>
        <script>
            var dataviz = kendo.dataviz;
            var geom = kendo.geometry;
            var Point = geom.Point;
            var draw = kendo.drawing;
            var Circle = draw.Circle;
            var Group = draw.Group;
            var Path = draw.Path;
            var Text = draw.Text;

            var Clock = kendo.Class.extend({
                init: function (container, options) {
                    this.options = $.extend({}, this.options, options);
                    this._center = Point.create(this.options.center);
                    this._render(container);
                    this.set(new Date());
                },

                options: {
                    center: [0, 0],
                    size: 100,
                    offset: 0,
                    title: ""
                },

                set: function (date) {
                    var center = this._center;

                    var seconds = date.getMilliseconds() / 1000;
                    seconds += date.getSeconds();
                    seconds += date.getMinutes() * 60;
                    seconds += (this.options.offset + date.getHours()) * 60 * 60;

                    var angle = (360 / 60) * seconds;
                    this._seconds.transform(geom.transform().rotate(angle, center));

                    angle = (360 / (60 * 60)) * seconds;
                    this._minutes.transform(geom.transform().rotate(angle, center));

                    angle = (360 / (12 * 60 * 60)) * seconds;
                    this._hours.transform(geom.transform().rotate(angle, center));
                },

                _render: function (container) {
                    // Stacking order matches element order
                    var root = new Group();
                    root.append(
                        this._renderFrame(),
                        this._renderTicks(),
                        this._renderHands(),
                        this._renderLabels(),
                        this._renderTitle()
                    );

                    container.append(root);
                },

                _renderHands: function () {
                    var center = this._center;
                    this._seconds = new Path()
                        .stroke("red", 1)
                        .moveTo(center).lineTo(center.x, this._fromTop(0.05));

                    this._minutes = new Path({
                        stroke: {
                            color: "black",
                            width: 3,
                            lineCap: "round",
                            opacity: 0.6
                        }
                    }).moveTo(center).lineTo(center.x, this._fromTop(0.04));

                    this._hours = new Path({
                        stroke: {
                            color: "black",
                            width: 6,
                            lineCap: "round",
                            opacity: 0.6
                        }
                    }).moveTo(center).lineTo(center.x, this._fromTop(0.25));

                    var hands = new Group();
                    hands.append(this._seconds, this._minutes, this._hours);

                    return hands;
                },

                _renderTicks: function () {
                    var center = this._center;
                    var ticks = new Group();

                    for (var i = 0; i < 360; i += 30) {
                        var p1 = new Point(center.x, this._fromTop(0.03)).rotate(i, center);
                        var p2 = new Point(center.x, this._fromTop(0.055)).rotate(i, center);
                        ticks.append(new Path({
                            stroke: {
                                color: "#333",
                                width: 1
                            }
                        }).moveTo(p1).lineTo(p2));
                    }

                    return ticks;
                },

                _renderLabels: function () {
                    var center = this._center;
                    var labels = new Group();
                    var font = "bold " + this.options.size * 0.08 + "px arial, helvetica, sans-serif";

                    var hours = 12;
                    for (var i = 0; i < 360; i += 90) {
                        var pos = new Point(center.x, this._fromTop(0.12)).rotate(i, center);
                        var text = new Text(hours, pos, {
                            font: font,
                            fill: {
                                color: "#333"
                            }
                        });

                        this._centerText(text);

                        hours = (hours + 3) % 12;
                        labels.append(text);
                    }

                    return labels;
                },

                _renderFrame: function () {
                    var frame = new Group();
                    var size = this.options.size;

                    var outerCircle = new geom.Circle(this._center, (size / 2) - 4);
                    var innerCircle = new geom.Circle(this._center, size * 0.01);

                    frame.append(
                        new Circle(outerCircle, {
                            stroke: {
                                color: "#333",
                                width: 1
                            }
                        }),
                        new Circle(innerCircle).fill("black")
                    );

                    return frame;
                },

                _renderTitle: function () {
                    var group = new Group();
                    var title = this.options.title;

                    if (title) {
                        var pos = [this._center.x, this._fromTop(-0.1)];
                        var text = new Text(title, pos, {
                            font: "bold 16px arial",
                            fill: {
                                color: "#333"
                            }
                        });

                        this._centerText(text);
                        group.append(text);
                    }

                    return group;
                },

                _centerText: function (text) {
                    var bbox = text.bbox();
                    text.position().translate(-bbox.width() / 2, -bbox.height() / 2);
                },

                _fromTop: function (ratio) {
                    var size = this.options.size;
                    var top = this._center.y - size / 2;
                    return top + size * ratio;
                }
            });

            function initSurface(type) {
                return draw.Surface.create($("#surface"), { type: type });
            }

            function initClocks(container) {
                var now = new Date();

                var local = new Clock(container, {
                    center: [150, 150],
                    size: 300
                });

                var officeA = new Clock(container, {
                    center: [425, 200],
                    size: 200,
                    offset: -3,
                    title: "Office A"
                });

                var officeB = new Clock(container, {
                    center: [650, 200],
                    size: 200,
                    offset: 3,
                    title: "Office B"
                });

                return [local, officeA, officeB];
            }

            $(document).ready(function () {
                var surface = initSurface();

                var root = new Group();
                var clocks = initClocks(root);

                surface.draw(root);

                function loop() {
                    for (var i = 0; i < clocks.length; i++) {
                        clocks[i].set(new Date())
                    }

                    kendo.animationFrame(loop);
                }

                loop();

                $("#select-type li").each(function () {
                    var type = $(this).text().toLowerCase();
                    if (!kendo.support[type]) {
                        $(this).addClass("km-state-disabled");
                    }
                });

                $("#select-type").kendoMobileButtonGroup({
                    select: function (e) {
                        var option = $("li", e.sender.element).eq(e.index);
                        var type = option.text().toLowerCase();

                        surface.destroy();
                        surface = initSurface(type);
                        surface.draw(root);
                    },
                    index: $("#select-type li:not(.km-state-disabled)").index()
                });
            });
        </script>
        <style>
            #example .box,
            .demo-section {
                margin: 1em auto;
                padding: 2em;
            }

            #surface-container {
                text-align: center;
                margin: 0 auto;
                width: 800px;
                height: 300px;
                padding: 20px;
            }
        </style>
    </div>

    <div id="example">
        <div id="scheduler"></div>

        <style>
            /*
                Use the DejaVu Sans font for display and embedding in the PDF file.
                The standard PDF fonts have no support for Unicode characters.
            */
            .k-scheduler {
                font-family: "DejaVu Sans", "Arial", sans-serif;
                font-size: .9em;
            }

            /* Hide toolbar, navigation and footer during export */
            .k-pdf-export .k-scheduler-toolbar,
            .k-pdf-export .k-scheduler-navigation .k-nav-today,
            .k-pdf-export .k-scheduler-navigation .k-nav-prev,
            .k-pdf-export .k-scheduler-navigation .k-nav-next,
            .k-pdf-export .k-scheduler-footer {
                display: none;
            }
        </style>

        <script>
            // Import DejaVu Sans font for embedding

            // NOTE: Only required if the Kendo UI stylesheets are loaded
            // from a different origin, e.g. cdn.kendostatic.com
            kendo.pdf.defineFont({
                "DejaVu Sans": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans.ttf",
                "DejaVu Sans|Bold": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans-Bold.ttf",
                "DejaVu Sans|Bold|Italic": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf",
                "DejaVu Sans|Italic": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf",
                "WebComponentsIcons": "https://kendo.cdn.telerik.com/2017.1.223/styles/fonts/glyphs/WebComponentsIcons.ttf"
            });
        </script>

        <!-- Load Pako ZLIB library to enable PDF compression -->
        <script src="https://kendo.cdn.telerik.com/2018.3.1017/js/pako_deflate.min.js"></script>

        <script>
            $(function () {
                $("#scheduler").kendoScheduler({
                    toolbar: ["pdf"],
                    pdf: {
                        fileName: "Kendo UI Scheduler Export.pdf",
                        proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
                    },
                    date: new Date("2013/6/13"),
                    startTime: new Date("2013/6/13 07:00 AM"),
                    height: 600,
                    views: [
                        "day",
                        { type: "workWeek", selected: true },
                        "week",
                        "month",
                        "agenda",
                        { type: "timeline", eventHeight: 50 }
                    ],
                    timezone: "Etc/UTC",
                    dataSource: {
                        batch: true,
                        transport: {
                            read: {
                                url: "https://demos.telerik.com/kendo-ui/service/tasks",
                                dataType: "jsonp"
                            },
                            update: {
                                url: "https://demos.telerik.com/kendo-ui/service/tasks/update",
                                dataType: "jsonp"
                            },
                            create: {
                                url: "https://demos.telerik.com/kendo-ui/service/tasks/create",
                                dataType: "jsonp"
                            },
                            destroy: {
                                url: "https://demos.telerik.com/kendo-ui/service/tasks/destroy",
                                dataType: "jsonp"
                            },
                            parameterMap: function (options, operation) {
                                if (operation !== "read" && options.models) {
                                    return { models: kendo.stringify(options.models) };
                                }
                            }
                        },
                        schema: {
                            model: {
                                id: "taskId",
                                fields: {
                                    taskId: { from: "TaskID", type: "number" },
                                    title: { from: "Title", defaultValue: "No title", validation: { required: true } },
                                    start: { type: "date", from: "Start" },
                                    end: { type: "date", from: "End" },
                                    startTimezone: { from: "StartTimezone" },
                                    endTimezone: { from: "EndTimezone" },
                                    description: { from: "Description" },
                                    recurrenceId: { from: "RecurrenceID" },
                                    recurrenceRule: { from: "RecurrenceRule" },
                                    recurrenceException: { from: "RecurrenceException" },
                                    ownerId: { from: "OwnerID", defaultValue: 1 },
                                    isAllDay: { type: "boolean", from: "IsAllDay" }
                                }
                            }
                        }
                    },
                    resources: [
                        {
                            field: "ownerId",
                            title: "Owner",
                            dataSource: [
                                { text: "Alex", value: 1, color: "#f8a398" },
                                { text: "Bob", value: 2, color: "#51a0ed" },
                                { text: "Charlie", value: 3, color: "#56ca85" }
                            ]
                        }
                    ]
                });

            });
        </script>
    </div>


</body>
</html>




<style type='text/css'>
    .embeddedServiceHelpButton .helpButton .uiButton {
        background-color: #005290;
        font-family: "Arial", sans-serif;
    }

        .embeddedServiceHelpButton .helpButton .uiButton:focus {
            outline: 1px solid #005290;
        }
</style>

<script type='text/javascript' src='https://service.force.com/embeddedservice/5.0/esw.min.js'></script>
<script type='text/javascript'>
    var initESW = function (gslbBaseURL) {
        embedded_svc.settings.displayHelpButton = true; //Or false
        embedded_svc.settings.language = 'bg'; //For example, enter 'en' or 'en-US'

        embedded_svc.settings.defaultMinimizedText = 'Chat with Diana'; //(Defaults to Chat with an Expert)
        embedded_svc.settings.disabledMinimizedText = 'Diana is Offline'; //(Defaults to Agent Offline)

        //embedded_svc.settings.loadingText = ''; //(Defaults to Loading)
        embedded_svc.settings.storageDomain = 'dyordanova.com'; //(Sets the domain for your deployment so that visitors can navigate subdomains during a chat session)

        // Settings for Live Agent
        //embedded_svc.settings.directToButtonRouting = function(prechatFormData) {
        // Dynamically changes the button ID based on what the visitor enters in the pre-chat form.
        // Returns a valid button ID.
        //};
        //embedded_svc.settings.prepopulatedPrechatFields = {}; //Sets the auto-population of pre-chat form fields
        //embedded_svc.settings.fallbackRouting = []; //An array of button IDs, user IDs, or userId_buttonId
        //embedded_svc.settings.offlineSupportMinimizedText = '...'; //(Defaults to Contact Us)

        embedded_svc.settings.enabledFeatures = ['LiveAgent'];
        embedded_svc.settings.entryFeature = 'LiveAgent';

        embedded_svc.init(
            'https://brave-raccoon-x0lr0k-dev-ed.my.salesforce.com',
            'https://shumanova-developer-edition.eu16.force.com/codero',
            gslbBaseURL,
            '00D1t000000pIxX',
            'CoderGroup',
            {
                baseLiveAgentContentURL: 'https://c.la1-c1-fra.salesforceliveagent.com/content',
                deploymentId: '5721t000000k9ry',
                buttonId: '5731t000000H3ch',
                baseLiveAgentURL: 'https://d.la1-c1-fra.salesforceliveagent.com/chat',
                eswLiveAgentDevName: 'CoderGroup',
                isOfflineSupportEnabled: true
            }
        );
    };

    if (!window.embedded_svc) {
        var s = document.createElement('script');
        s.setAttribute('src', 'https://brave-raccoon-x0lr0k-dev-ed.my.salesforce.com/embeddedservice/5.0/esw.min.js');
        s.onload = function () {
            initESW(null);
        };
        document.body.appendChild(s);
    } else {
        initESW('https://service.force.com');
    }
</script>